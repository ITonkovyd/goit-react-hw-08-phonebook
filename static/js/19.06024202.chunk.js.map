{"version":3,"file":"static/js/19.06024202.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsForm/ContactsForm.jsx","../node_modules/nanoid/index.browser.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.styled.jsx","Pages/Contacts/Contacts.jsx","Services/Styles/Form.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Li = styled.li`\n  margin-left: 0;\n  margin-right: 15px;\n  padding: 3px 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  vertical-align: baseline;\n  border-radius: 4px;\n  &:nth-child(odd) {\n    background-color: lightblue;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 20px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  width: 70px;\n  height: 20px;\n  text-align: center;\n  background-color: #fff;\n  &:hover {\n    cursor: pointer;\n    background-color: lightcoral;\n  }\n`;\n\nexport const Span = styled.span`\n  padding-left: 10px;\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { PropTypes } from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport contact from '../../Services/images/contact.png';\nimport { Button, Div, Li, Span } from './ContactItem.styled';\n\nexport default function ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  return (\n    <Li>\n      <Div>\n        <img src={contact} alt=\"contact\" width=\"20px\" />\n        <Span>\n          {name}: <span> </span>\n          {number}\n        </Span>\n      </Div>\n\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </Button>\n    </Li>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const getContacts = state => state.contacts.contacts.items;\nexport const getLoadingStatus = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  margin-left: 20px;\n  padding: 0;\n  list-style: none;\n  min-height: max-content;\n  max-height: 250px;\n  text-align: start;\n  overflow-y: scroll;\n`;\n","import ContactItem from 'components/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/contactsSelectors';\nimport { Ul } from './ContactList.styled';\n\nexport default function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = [...contacts];\n\n  if (!Array.isArray(contacts)) {\n    return <p>No contacts to display.</p>;\n  }\n\n  function handleFilter() {\n    if (contacts.length > 0) {\n      return filteredContacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contacts;\n    }\n  }\n\n  return (\n    <>\n      {filter.trim() !== '' && handleFilter().length === 0 ? (\n        <p>You don`t have contacts with this name.</p>\n      ) : (\n        <Ul>\n          {handleFilter().map(contact => {\n            const { id, name, number } = contact;\n            return <ContactItem key={id} id={id} name={name} number={number} />;\n          })}\n        </Ul>\n      )}\n    </>\n  );\n}\n","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { Button, Form, Input, Label } from '../../Services/Styles/Form.styled';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const id = nanoid();\n    const newContact = { id, name, number };\n\n    const isIncluded = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const NameToTitleCase = newContact.name\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n\n    if (isIncluded) {\n      alert(`${NameToTitleCase} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n\n      setName('');\n      setNumber('');\n    }\n\n    e.target.reset();\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">\n        Name <br />\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label htmlFor=\"number\">\n        Phone <br />\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={e => {\n            setNumber(e.target.value);\n          }}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add to contacts'</Button>\n    </Form>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const P = styled.p`\n  display: block;\n  margin-bottom: 0;\n  padding: 0;\n`;\n\nexport const Input = styled.input`\n  width: 150px;\n  border-radius: 4px;\n  border: none;\n  outline: 2px solid grey;\n  font-weight: 600;\n  color: #5187ec;\n  &:focus {\n    outline: 2px solid #5187ec;\n  }\n`;\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport { FilterWrapper, Input, P } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <label htmlFor=\"filter\">\n        <P>Find contact by name</P>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => dispatch(filterContacts(e.target.value.toLowerCase()))}\n        />\n      </label>\n    </FilterWrapper>\n  );\n}\n","import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n  padding: 0;\n  margin: 0;\n`;\n","import { useEffect } from 'react';\n\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport Filter from 'components/Filter/Filter';\nimport { H1 } from './Contacts.styled';\n\nconst Contacts = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <H1>Phonebook</H1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p>\n          No contacts yet. <br /> It's time to create new contacts!\n        </p>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","const { default: styled } = require('styled-components');\n\nexport const Form = styled.form`\n  outline: 2px solid grey;\n  border-radius: 8px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  margin-top: 5px;\n  width: 200px;\n  border-radius: 4px;\n  border: none;\n  outline: 2px solid grey;\n  font-weight: 600;\n  color: #5187ec;\n  &:focus {\n    outline: 2px solid #5187ec;\n  }\n`;\n\nexport const Label = styled.label`\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-top: 10px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  width: 120px;\n  height: 20px;\n  text-align: center;\n  background-color: #fff;\n  &:hover {\n    cursor: pointer;\n    background-color: #5187ec;\n  }\n`;\n"],"names":["Li","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","Span","_templateObject3","Div","_templateObject4","ContactItem","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","_jsx","src","contact","alt","width","type","onClick","deleteContact","getContacts","state","contacts","items","getFilter","filter","Ul","ContactList","useSelector","filteredContacts","_toConsumableArray","Array","isArray","handleFilter","length","toLowerCase","includes","_Fragment","trim","map","ContactsForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","Form","onSubmit","e","preventDefault","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","newContact","isIncluded","some","NameToTitleCase","split","word","charAt","slice","join","alert","concat","addContact","target","reset","Label","htmlFor","Input","value","onChange","pattern","title","required","P","FilterWrapper","Filter","filterContacts","H1","useEffect","fetchContacts","require","default","form","input","label","button"],"sourceRoot":""}