{"version":3,"file":"static/js/19.60489f58.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsForm/ContactsForm.jsx","../node_modules/nanoid/index.browser.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.styled.jsx","Pages/Contacts/Contacts.jsx","Services/Loader/Loader.js","Services/Styles/Form.styled.js"],"sourcesContent":["// all contacts\nexport const getContacts = state => state.contacts.contacts.items;\n\n// loading contacts status\nexport const getLoadingStatus = state =>\n  state.contacts.contacts.isLoadingContacts;\n\n// add contact\nexport const getIsAddingContact = state =>\n  state.contacts.contacts.addingContact.isAddingContact;\nexport const getAddingContactStatus = state =>\n  state.contacts.contacts.addingContact.addingContactStatus;\n\n// delete contact\nexport const getIsDeletingContact = state =>\n  state.contacts.contacts.deletingContact.isDeletingContact;\n\nexport const getError = state => state.contacts.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n","import styled from 'styled-components';\n\nexport const Li = styled.li`\n  margin-left: 0;\n  margin-right: 15px;\n  padding: 3px 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  vertical-align: baseline;\n  border-radius: 4px;\n  &:nth-child(odd) {\n    background-color: lightblue;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 20px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  width: 70px;\n  height: 20px;\n  text-align: center;\n  background-color: #fff;\n  &:hover {\n    cursor: pointer;\n    background-color: lightcoral;\n  }\n`;\n\nexport const Span = styled.span`\n  padding-left: 10px;\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import Loader from 'Services/Loader/Loader';\nimport { PropTypes } from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { getIsDeletingContact } from 'redux/contacts/contactsSelectors';\nimport contact from '../../Services/images/contact.png';\nimport { Button, Div, Li, Span } from './ContactItem.styled';\n\nexport default function ContactItem({ id, name, number }) {\n  const [isClicked, setIsClicked] = useState(false);\n  const dispatch = useDispatch();\n  const isDeletingContacts = useSelector(getIsDeletingContact);\n\n  useEffect(() => {\n    if (!isDeletingContacts) {\n      setIsClicked(false);\n    }\n  }, [isDeletingContacts]);\n\n  const handleDeleteContact = contactData => {\n    setIsClicked(true);\n    dispatch(deleteContact(contactData));\n  };\n\n  return (\n    <Li>\n      <Div>\n        <img src={contact} alt=\"contact\" width=\"20px\" />\n        <Span>\n          {name}: <span> </span>\n          {number}\n        </Span>\n      </Div>\n\n      <Button type=\"button\" onClick={() => handleDeleteContact({ id, name })}>\n        {isClicked ? <Loader width=\"16\" height=\"16\" color=\"black\" /> : 'Delete'}\n      </Button>\n    </Li>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  margin-left: 20px;\n  padding: 0;\n  list-style: none;\n  min-height: max-content;\n  max-height: 250px;\n  text-align: start;\n  overflow-y: scroll;\n`;\n","import ContactItem from 'components/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/contactsSelectors';\nimport { Ul } from './ContactList.styled';\n\nexport default function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = [...contacts];\n\n  if (!Array.isArray(contacts)) {\n    return <p>No contacts to display.</p>;\n  }\n\n  function handleFilter() {\n    if (contacts.length > 0) {\n      return filteredContacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contacts;\n    }\n  }\n\n  return (\n    <>\n      {filter.trim() !== '' && handleFilter().length === 0 ? (\n        <p>You don`t have contacts with this name.</p>\n      ) : (\n        <Ul>\n          {handleFilter().map(contact => {\n            const { id, name, number } = contact;\n            return <ContactItem key={id} id={id} name={name} number={number} />;\n          })}\n        </Ul>\n      )}\n    </>\n  );\n}\n","import Loader from 'Services/Loader/Loader';\nimport { notifyOptions } from 'Services/Notify/NotifyStyles';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport {\n  getAddingContactStatus,\n  getContacts,\n  getIsAddingContact,\n} from 'redux/contacts/contactsSelectors';\nimport { Button, Form, Input, Label } from '../../Services/Styles/Form.styled';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isAddingContact = useSelector(getIsAddingContact);\n  const addingContactStatus = useSelector(getAddingContactStatus);\n\n  useEffect(() => {\n    if (addingContactStatus === 201) {\n      setName('');\n      setNumber('');\n    }\n  }, [addingContactStatus]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const id = nanoid();\n    const newContact = { id, name, number };\n\n    const isIncluded = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const NameToTitleCase = newContact.name\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n\n    if (isIncluded) {\n      Notify.failure(\n        `${NameToTitleCase} is already in contacts.`,\n        notifyOptions\n      );\n    } else {\n      dispatch(addContact(newContact));\n    }\n\n    e.target.reset();\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">\n        Name <br />\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label htmlFor=\"number\">\n        Phone <br />\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={e => {\n            setNumber(e.target.value);\n          }}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">\n        {isAddingContact ? (\n          <Loader width=\"16\" height=\"16\" color=\"black\" />\n        ) : (\n          'Add to contacts'\n        )}\n      </Button>\n    </Form>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const P = styled.p`\n  display: block;\n  margin-bottom: 0;\n  padding: 0;\n`;\n\nexport const Input = styled.input`\n  width: 150px;\n  border-radius: 4px;\n  border: none;\n  outline: 2px solid grey;\n  font-weight: 600;\n  color: #5187ec;\n  &:focus {\n    outline: 2px solid #5187ec;\n  }\n`;\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport { FilterWrapper, Input, P } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <label htmlFor=\"filter\">\n        <P>Find contact by name</P>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => dispatch(filterContacts(e.target.value.toLowerCase()))}\n        />\n      </label>\n    </FilterWrapper>\n  );\n}\n","import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n  padding: 0;\n  margin: 0;\n`;\n","import { useEffect, useState } from 'react';\n\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n\nimport Loader from 'Services/Loader/Loader';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport Filter from 'components/Filter/Filter';\nimport { H1 } from './Contacts.styled';\n\nconst Contacts = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [isMounting, setIsMounting] = useState(true);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    setIsMounting(false);\n  }, [dispatch]);\n\n  return (\n    <>\n      <H1>Phonebook</H1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n\n      {isMounting ? (\n        <Loader />\n      ) : contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p>\n          No contacts yet. <br /> It's time to create new contacts!\n        </p>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","import { ThreeCircles } from 'react-loader-spinner';\n\nconst Loader = ({ height = '100', width = '100', color = '#4fa94d' }) => {\n  return (\n    <ThreeCircles\n      height={height}\n      width={width}\n      color={color}\n      wrapperStyle={{\n        display: 'block',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n    />\n  );\n};\n\nexport default Loader;\n","const { default: styled } = require('styled-components');\n\nexport const Form = styled.form`\n  outline: 2px solid grey;\n  border-radius: 8px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  margin-top: 5px;\n  width: 200px;\n  border-radius: 4px;\n  border: none;\n  outline: 2px solid grey;\n  font-weight: 600;\n  color: #5187ec;\n  &:focus {\n    outline: 2px solid #5187ec;\n  }\n`;\n\nexport const Label = styled.label`\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-top: 10px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  width: 120px;\n  height: 20px;\n  text-align: center;\n  background-color: #fff;\n  &:hover {\n    cursor: pointer;\n    background-color: #5187ec;\n  }\n`;\n"],"names":["getContacts","state","contacts","items","getIsAddingContact","addingContact","isAddingContact","getAddingContactStatus","addingContactStatus","getIsDeletingContact","deletingContact","isDeletingContact","getFilter","filter","Li","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","Span","_templateObject3","Div","_templateObject4","ContactItem","_ref","id","name","number","_useState","useState","_useState2","_slicedToArray","isClicked","setIsClicked","dispatch","useDispatch","isDeletingContacts","useSelector","useEffect","_jsxs","children","_jsx","src","contact","alt","width","type","onClick","contactData","deleteContact","Loader","height","color","Ul","ContactList","filteredContacts","_toConsumableArray","Array","isArray","handleFilter","length","toLowerCase","includes","_Fragment","trim","map","ContactsForm","setName","_useState3","_useState4","setNumber","Form","onSubmit","e","preventDefault","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","newContact","isIncluded","some","NameToTitleCase","split","word","charAt","slice","join","Notify","concat","notifyOptions","addContact","target","reset","Label","htmlFor","Input","value","onChange","pattern","title","required","P","FilterWrapper","Filter","filterContacts","H1","isMounting","setIsMounting","fetchContacts","_ref$height","_ref$width","_ref$color","ThreeCircles","wrapperStyle","display","justifyContent","alignItems","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","require","default","form","input","label","button"],"sourceRoot":""}